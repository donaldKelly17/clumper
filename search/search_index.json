{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Clumper The idea and the majority of the code is not mine. Created from following a tutorial at calmcode.io A small library that can clump sequences of data together. Part of a video series on calmcode.io .","title":"**Clumper**"},{"location":"#clumper","text":"The idea and the majority of the code is not mine. Created from following a tutorial at calmcode.io A small library that can clump sequences of data together. Part of a video series on calmcode.io .","title":"Clumper"},{"location":"api/clumper/","text":"Clumper This object adds methods to a list of dictionaries that make it nicer to explore. Usage: 1 2 3 4 5 6 from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] c = Clumper ( list_dicts ) assert len ( c ) == 4 collect ( self ) Returns a list instead of a Clumper object. Source code in clumper/clump.py def collect ( self ): \"\"\" Returns a list instead of a `Clumper` object. ![](../img/collect.png) \"\"\" return self . blob head ( self , n = 5 ) Selects the top n items from the collection. Parameters: Name Type Description Default n the number of items to grab 5 Usage: 1 2 3 4 5 6 7 8 from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . head ( 2 ) expected = [{ 'a' : 1 }, { 'a' : 2 }] assert result . equals ( expected ) Source code in clumper/clump.py def head ( self , n = 5 ): \"\"\" Selects the top `n` items from the collection. ![](../img/head.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).head(2) expected = [{'a': 1}, {'a': 2}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) n = min ( n , len ( self )) return Clumper ([ self . blob [ i ] for i in range ( n )]) keep ( self , * funcs ) Allows you to select which items to keep and which items to remove. Parameters: Name Type Description Default funcs functions that indicate which items to keep () Usage: 1 2 3 4 5 6 7 from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected ) Source code in clumper/clump.py def keep ( self , * funcs ): \"\"\" Allows you to select which items to keep and which items to remove. ![](../img/keep.png) Arguments: funcs: functions that indicate which items to keep Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] clump = Clumper(list_dicts).keep(lambda d: d['a'] >= 3) expected = [{'a': 3}, {'a': 4}] assert clump.equals(expected) ``` \"\"\" data = self . blob for func in funcs : data = [ d for d in data if func ( d )] return Clumper ( data ) select ( self , * keys ) Selects a subset of the keys in each item in the collection. Parameters: Name Type Description Default keys the keys to keep () Usage: 1 2 3 4 5 6 7 8 9 10 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ]) Source code in clumper/clump.py def select ( self , * keys ): \"\"\" Selects a subset of the keys in each item in the collection. ![](../img/select.png) Arguments: keys: the keys to keep Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).select('a', 'b') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return Clumper ([{ k : d [ k ] for k in keys } for d in self . blob ]) tail ( self , n ) Selects the bottom n items from the collection. Parameters: Name Type Description Default n the number of items to grab required Usage: 1 2 3 4 5 6 7 8 from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . tail ( 2 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert result . equals ( expected ) Source code in clumper/clump.py def tail ( self , n ): \"\"\" Selects the bottom `n` items from the collection. ![](../img/tail.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).tail(2) expected = [{'a': 3}, {'a': 4}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be positive, got { n } \" ) n = min ( n , len ( self )) return Clumper ([ self . blob [ - i ] for i in range ( 1 , n + 1 )])","title":"`Clumper`"},{"location":"api/clumper/#clumper","text":"","title":"Clumper"},{"location":"api/clumper/#clumper.clump.Clumper","text":"This object adds methods to a list of dictionaries that make it nicer to explore. Usage: 1 2 3 4 5 6 from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] c = Clumper ( list_dicts ) assert len ( c ) == 4","title":"clumper.clump.Clumper"},{"location":"api/clumper/#clumper.clump.Clumper.collect","text":"Returns a list instead of a Clumper object. Source code in clumper/clump.py def collect ( self ): \"\"\" Returns a list instead of a `Clumper` object. ![](../img/collect.png) \"\"\" return self . blob","title":"collect()"},{"location":"api/clumper/#clumper.clump.Clumper.head","text":"Selects the top n items from the collection. Parameters: Name Type Description Default n the number of items to grab 5 Usage: 1 2 3 4 5 6 7 8 from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . head ( 2 ) expected = [{ 'a' : 1 }, { 'a' : 2 }] assert result . equals ( expected ) Source code in clumper/clump.py def head ( self , n = 5 ): \"\"\" Selects the top `n` items from the collection. ![](../img/head.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).head(2) expected = [{'a': 1}, {'a': 2}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) n = min ( n , len ( self )) return Clumper ([ self . blob [ i ] for i in range ( n )])","title":"head()"},{"location":"api/clumper/#clumper.clump.Clumper.keep","text":"Allows you to select which items to keep and which items to remove. Parameters: Name Type Description Default funcs functions that indicate which items to keep () Usage: 1 2 3 4 5 6 7 from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] clump = Clumper ( list_dicts ) . keep ( lambda d : d [ 'a' ] >= 3 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert clump . equals ( expected ) Source code in clumper/clump.py def keep ( self , * funcs ): \"\"\" Allows you to select which items to keep and which items to remove. ![](../img/keep.png) Arguments: funcs: functions that indicate which items to keep Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] clump = Clumper(list_dicts).keep(lambda d: d['a'] >= 3) expected = [{'a': 3}, {'a': 4}] assert clump.equals(expected) ``` \"\"\" data = self . blob for func in funcs : data = [ d for d in data if func ( d )] return Clumper ( data )","title":"keep()"},{"location":"api/clumper/#clumper.clump.Clumper.select","text":"Selects a subset of the keys in each item in the collection. Parameters: Name Type Description Default keys the keys to keep () Usage: 1 2 3 4 5 6 7 8 9 10 from clumper import Clumper list_dicts = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 2 , 'b' : 3 , 'c' : 4 }, { 'a' : 1 , 'b' : 6 }] clump = Clumper ( list_dicts ) . select ( 'a' , 'b' ) assert all ([ \"c\" not in d . keys () for d in clump ]) Source code in clumper/clump.py def select ( self , * keys ): \"\"\" Selects a subset of the keys in each item in the collection. ![](../img/select.png) Arguments: keys: the keys to keep Usage: ```python from clumper import Clumper list_dicts = [ {'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c':4}, {'a': 1, 'b': 6}] clump = Clumper(list_dicts).select('a', 'b') assert all([\"c\" not in d.keys() for d in clump]) ``` \"\"\" return Clumper ([{ k : d [ k ] for k in keys } for d in self . blob ])","title":"select()"},{"location":"api/clumper/#clumper.clump.Clumper.tail","text":"Selects the bottom n items from the collection. Parameters: Name Type Description Default n the number of items to grab required Usage: 1 2 3 4 5 6 7 8 from clumper import Clumper list_dicts = [{ 'a' : 1 }, { 'a' : 2 }, { 'a' : 3 }, { 'a' : 4 }] result = Clumper ( list_dicts ) . tail ( 2 ) expected = [{ 'a' : 3 }, { 'a' : 4 }] assert result . equals ( expected ) Source code in clumper/clump.py def tail ( self , n ): \"\"\" Selects the bottom `n` items from the collection. ![](../img/tail.png) Arguments: n: the number of items to grab Usage: ```python from clumper import Clumper list_dicts = [{'a': 1}, {'a': 2}, {'a': 3}, {'a': 4}] result = Clumper(list_dicts).tail(2) expected = [{'a': 3}, {'a': 4}] assert result.equals(expected) ``` \"\"\" if not isinstance ( n , int ): raise ValueError ( f \"`n` must be a positive integer, got { n } \" ) if n < 0 : raise ValueError ( f \"`n` must be positive, got { n } \" ) n = min ( n , len ( self )) return Clumper ([ self . blob [ - i ] for i in range ( 1 , n + 1 )])","title":"tail()"}]}